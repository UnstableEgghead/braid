#!/usr/bin/env python2

import sys, os, getopt, glob, codecs, fnmatch, ConfigParser
scriptPath = os.path.realpath(os.path.dirname(sys.argv[0]))
sys.path.append(scriptPath + os.sep + 'lib')
from tiddlywiki import TiddlyWiki


def usage():
   print 'usage: unbraid [-a author] [-o outputfile] [-r rtfproof] [-s splitdir] [-t filetype] source1 [source2..]'


def main (argv):

   # defaults

   author = 'braid'
   output = ''
   rtfOutput = ''
   splitDir = ''
   twineFiletype = '.tw'
   keepcharacters = (' ', '_', '-', '(', ')')

   # read command line switches

   try:
      opts, args = getopt.getopt(argv, 'a:o:r:s:f:', ['author=', 'output=','rtf=', 'splitdir=', 'filetype='])
   except getopt.GetoptError:
      usage()
      sys.exit(2)

   for opt, arg in opts:
      if (opt in ('-a', '--author')):
         author = arg
      elif (opt in ('-o', '--output')):
         output = arg
      elif (opt in ('-r', '--rtf')):
         rtfOutput = arg
      elif (opt in ('-s', '--splitdir')):
         splitDir = arg
      elif (opt in ('-f', '--filetype')):
         twineFiletype = arg

   # construct a TW object

   tw = TiddlyWiki(author)

   # read source files		

   sources = []

   # Read files from command line
   for arg in args:
      for file in glob.glob(arg):
         sources.append(file)

   if len(sources) == 0:
      print 'unbraid: no html files specified\n'
      sys.exit(2)	

   for source in sources:
      try:
         htmlFile = codecs.open(source, 'r', 'utf-8-sig', 'strict')
         htmlString = htmlFile.read()
      except UnicodeDecodeError:
         try:
            htmlFile = codecs.open(source, 'r', 'utf16', 'strict')
            htmlString = htmlFile.read()
         except:
            htmlFile = open(source, 'rb')
            htmlString = htmlFile.read()
      htmlFile.close()
      tw.addHtml(htmlString)

   if rtfOutput != '':
      rtfOutputFile = open(rtfOutput, 'w')
      rtfOutputFile.write(tw.toRtf().encode('utf-8'))
      rtfOutputFile.close()

   if splitDir != '':
      tiddlers = tw.tiddlers.keys()
      for tiddler in tiddlers:
         tiddlerFilename = "".join(char for char in tiddler if char.isalnum() or char in keepcharacters).rstrip()
         tiddlerOutFile = open(os.path.normpath(os.path.join(splitDir, tiddlerFilename + twineFiletype)), 'a')
         tiddlerOutFile.write(tw.tiddlers[tiddler].toTwee().encode('utf-8'))
         tiddlerOutFile.close()
   elif output != '':
      outputFile = open(output, 'w')
      outputFile.write(tw.toTwee().encode('utf-8'))
      outputFile.close()
   else:
      print tw.toTwee()
   

if __name__ == '__main__':
   main(sys.argv[1:])
